
## Docker commands

## Image commands

docker pull <image name:tag> : to pull image from a docker registry

docker images/docker image ls : to list current images in your local registry

docker rmi <image name:tag> : To remove images from local registry

docker rmi -f $(docker images) : Remove all docker images at once

docker search <image name> To search for an image name from a public registry

docker save <image name>  >  filename.tar  : To save an image in a tar format and share with other people

docker image load --input <file-name>  : To load a docker image from a tar file back into the local repository

Docker inspect

#############################################
## Container Commands

docker run <image name>: to start and run a container

docker run --detached or docker run -d : to run docker in detached mode or backgroud mode so you can have access to your terminal while container runs in the backend.

docker run -d -p <host-port:container-port> --name <container name> <image> : to start a container in detached mode, passing  port binding from your host to container port and provifing a name to the container.

docker ps : to list containers running state

docker ps -a : To list all containers .. irrespective of whether they are exited or running

docker ps -a -q : To list containers by theier ID's

docker logs <docker containe-ID> : Display logs for running container

docker stop <container ID> : To stop a specific container 

docker start <container ID> : To start a stopped container

docker rm <container ID> to delete a specific container ..Note: must confirm container is deleted by rinting out the container ID

docker rm -f $(docker ps -aq) : Forcefully remove all containers without stopping them

docker run -it ubuntu bash : to start the ubuntu container and log into it

cat /etc/*release* : to list OS details of the container

docker commit <container ID> <name>

docker exec -it <containerID> bash

##############################################################################

## Dockerfile

### Dockerfile

A Dockerfile is a text document that contains all the commands you would normally execute manually in order to build a Docker image. Docker can build images automatically by reading the instructions from a Dockerfile.

FROM ubuntu
LABEL project="jjtech"
RUN apt update
RUN apt full-upgrade -y && apt install python-pip -y
RUN pip2 install flask
WORKDIR /opt
COPY app.py /opt/app.py
ENTRYPOINT FLASK_APP=/opt/app.py flask run --host=0.0.0.0 --port=8080


docker build -t <image-name:1.0 > .

docker run --name <container name> -d -p 8000:8080 <image-name:tag>



###################################
## Docker volume

docker voluem create <volume name>

docker run -v <host-path:container-path> <image>

docker run --name website -v c:/Users/Anselme/Documents/Demos/docker/website:/usr/share/nginx/html -d -p 9000:80 nginx

docker run -d -p 9000:80 -v c:/Users/Anselme/Documents/Demos/docker/website:/usr/share/nginx/html -v c:/Users/Anselme/Documents/Demos/docker/logs:/var/log/nginx --name nginx-with-my-content nginx


docker exec <cont-ID> -- cat /etc/*release*

docker exec -it nginx bash 




